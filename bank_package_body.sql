CREATE OR REPLACE PACKAGE BODY CITI_BANK IS
FUNCTION COUNT_NUMBER_CUSTOMER RETURN NUMBER;
FUNCTION CHECK_CUSTOMER_ID (P_CUSTOMER_ID IN NUMBER) RETURN NUMBER;
FUNCTION COUNT_BANK_SB_ACCOUNT RETURN NUMBER;

-- FUNCTION RETURN COUNT NUMBER OF CUSTOMERS EXISTING IN A BANK 
-----------------------------------------------------------------

FUNCTION COUNT_NUMBER_CUSTOMER RETURN NUMBER
IS
V_COUNT NUMBER;
BEGIN
 SELECT COUNT(*) INTO V_COUNT FROM BANK_CUST;
 RETURN V_COUNT;
EXCEPTION
 WHEN OTHERS THEN
  RETURN NULL;
END COUNT_NUMBER_CUSTOMER;

--FUNCTION CHECKING WHETHER CUSTOMER EXISTING OR NOT
-------------------------------------------------------

FUNCTION CHECK_CUSTOMER_ID (P_CUSTOMER_ID IN NUMBER)
RETURN NUMBER IS
  CURSOR C1
  IS 
  SELECT 'EXISTED' FROM BANK_CUST 
  WHERE CUST_ID=P_CUSTOMER_ID;
  V_TEMP CHAR(1);
BEGIN
  OPEN C1;
  FETCH C1 INTO V_TEMP;
  CLOSE C1;
  IF V_TEMP='EXISTED' THEN
    RETURN 1;
  ELSE
    RETURN -1;
  END IF;
EXCEPTION 
  WHEN OTHERS THEN
    RETURN NULL;
END CHECK_CUSTOMER_ID;  

FUNCTION COUNT_BANK_SB_ACCOUNT RETURN NUMBER
IS
V_SB_ACCOUNT_COUNT NUMBER;
BEGIN
 SELECT COUNT(*) INTO V_SB_ACCOUNT_COUNT FROM BANK_SB_ACCOUNT;
 RETURN V_SB_ACCOUNT_COUNT;
EXCEPTION
 WHEN OTHERS THEN
  RETURN NULL;
END COUNT_BANK_SB_ACCOUNT ;

-- PROCEDURE BODY FOR ADD CUSTOMER 
-------------------------------------------

PROCEDURE ADD_CUSTOMER
(P_CUST_FIRST_NAME VARCHAR2,
 P_INITIALS  VARCHAR2,
 P_CUST_LAST_NAME VARCHAR2,
 P_CUST_GENDER VARCHAR2 DEFAULT 'F',
 P_CUST_DOB DATE,
 P_CUST_TYPE VARCHAR2 DEFAULT 'IND')
IS
V_COUNT NUMBER;
V_CUST_ID NUMBER;
BEGIN
  IF UPPER(P_CUST_GENDER) NOT IN ('M','F') THEN
    RAISE EXCE1;
  END IF;
  IF UPPER(P_CUST_TYPE) NOT IN ('IND','CORP') THEN
    RAISE EXCE1;
  END IF;
  V_COUNT:=COUNT_NUMBER_CUSTOMER;
  IF V_COUNT=0 THEN
    V_CUST_ID:=1001;
  ELSE
    SELECT MAX(CUST_ID)+1 INTO V_CUST_ID FROM BANK_CUST;
  END IF;
    INSERT INTO BANK_CUST 
  VALUES
  (V_CUST_ID,
   INITCAP(P_CUST_FIRST_NAME),
   INITCAP (P_INITIALS),
   INITCAP(P_CUST_LAST_NAME) ,
   UPPER(P_CUST_GENDER) ,
   P_CUST_DOB ,
   UPPER(P_CUST_TYPE) );
   COMMIT;
EXCEPTION
   WHEN EXCE1 THEN
    RAISE_APPLICATION_ERROR (-20025,'THE GENDER OR CUSTOMER TYPE HAS BEEN INCORRECTLY SPECIFIED');
   WHEN OTHERS THEN
    NULL;
END ADD_CUSTOMER;

-- PROCEDURE BODY FOR ADD CUSTOMER CONTACT 
----------------------------------------------------
 PROCEDURE ADD_CUSTOMER_CONTACT
(P_CUST_ID  BANK_CUST_CONTACT.CUST_ID%TYPE,
 P_CUST_PHONE BANK_CUST_CONTACT.CUST_PHONE%TYPE,
 P_CONTACT_TYPE BANK_CUST_CONTACT.CONTACT_TYPE%TYPE DEFAULT 'HOME',
 P_CUST_ADDR_LINE1 BANK_CUST_CONTACT.CUST_ADDR_LINE1%TYPE,
 P_CUST_ADDR_LINE2 BANK_CUST_CONTACT.CUST_ADDR_LINE2%TYPE,
 P_CUST_CITY BANK_CUST_CONTACT.CUST_CITY%TYPE,
 P_CUST_STATE BANK_CUST_CONTACT.CUST_STATE%TYPE,
 P_CUST_PIN BANK_CUST_CONTACT.CUST_PIN%TYPE) IS
V_TEMP NUMBER;
BEGIN
 V_TEMP:=CHECK_CUSTOMER_ID(P_CUST_ID);
 IF V_TEMP=-1 THEN
  RAISE EXCE1;
 END IF;
 IF LENGTH(P_CUST_PHONE) NOT BETWEEN 6 AND 10 THEN
  RAISE EXCE2;
 END IF;
 IF P_CONTACT_TYPE NOT IN ('HOME','OFFICE') THEN
  RAISE EXCE3;
 END IF; 
 IF LENGTH(P_CUST_PIN)<>6 THEN
  RAISE EXCE4;
 END IF; 
 INSERT INTO BANK_CUST_CONTACT
 VALUES
 (P_CUST_ID  ,
 P_CUST_PHONE ,
 P_CONTACT_TYPE ,
 INITCAP(P_CUST_ADDR_LINE1) ,
 INITCAP(P_CUST_ADDR_LINE2) ,
 INITCAP(P_CUST_CITY) ,
 INITCAP(P_CUST_STATE) ,
 P_CUST_PIN );
 COMMIT;
 EXCEPTION
 WHEN EXCE1 THEN
 RAISE_APPLICATION_ERROR(-20026,'THE CUSTOMER ID IS NOT CORRECT');
 WHEN EXCE2 THEN
 RAISE_APPLICATION_ERROR(-20027,'THE CUSTOMER PHONE IS NOT CORRECT NO OF DIGITS');
 WHEN EXCE3 THEN
 RAISE_APPLICATION_ERROR(-20028,'THE CUSTOMER CONTACT TYPE IS NOT CORRECT');
 WHEN EXCE4 THEN
 RAISE_APPLICATION_ERROR(-20029,'THE CUSTOMER CONTACT PIN IS NOT CORRECT');
 WHEN OTHERS THEN
  NULL;
END ADD_CUSTOMER_CONTACT;

-- PROCEDURE BODY FOR DELETE  CUSTOMER 
-----------------------------------------------------

PROCEDURE DEL_CUSTOMER(P_BANK_CUST_ID BANK_CUST.CUST_ID%TYPE) IS
BEGIN
 DELETE BANK_CUST WHERE BANK_CUST.CUST_ID=P_BANK_CUST_ID;
 --COMMIT;
END DEL_CUSTOMER;

PROCEDURE DEL_CUSTOMER(P_CUST_FIRST_NAME BANK_CUST.CUST_FIRST_NAME%TYPE) IS
BEGIN
 DELETE BANK_CUST WHERE CUST_FIRST_NAME=INITCAP(P_CUST_FIRST_NAME);
 --COMMIT;
END DEL_CUSTOMER;

---- PROCEDURE BODY FOR ADD CUSTOMER SAVIGS BANK ACCOUNT
-----------------------------------------------------------

PROCEDURE ADD_SAVINGBANK_ACCOUNT (
  P_PRIMARY_CUST_ID BANK_SB_ACCOUNT.PRIMARY_CUST_ID%TYPE,
  P_SECONDARY_CUST_ID BANK_SB_ACCOUNT.SECONDARY_CUST_ID%TYPE DEFAULT NULL,
  P_CURR_BAL_AMT BANK_SB_ACCOUNT.CURR_BAL_AMT%TYPE,
  P_ACC_STATUS BANK_SB_ACCOUNT.ACC_STATUS%TYPE DEFAULT 'Active',
  P_START_DATE BANK_SB_ACCOUNT.START_DATE%TYPE DEFAULT SYSDATE,
  P_END_DATE BANK_SB_ACCOUNT.END_DATE%TYPE DEFAULT NULL
) IS
V_COUNT NUMBER;
V_ACCOUNT_NO BANK_SB_ACCOUNT.ACCOUNT_NO%TYPE;
V_TEMP NUMBER;
V_MIN_AMT NUMBER;
BEGIN
 V_TEMP:=CHECK_CUSTOMER_ID(P_PRIMARY_CUST_ID);
 IF V_TEMP=-1 THEN
  RAISE EXCE1;
 END IF;
 IF P_SECONDARY_CUST_ID IS NOT NULL THEN
  V_TEMP:=CHECK_CUSTOMER_ID(P_PRIMARY_CUST_ID);
    IF V_TEMP=-1 THEN
      RAISE EXCE2;
    END IF;
 END IF;
 IF INITCAP(P_ACC_STATUS) NOT IN ('Active','Closed') THEN
    RAISE EXCE3;
 END IF;
 SELECT MIN_AMT INTO V_MIN_AMT FROM BANK_INT_RATE WHERE ACCOUNT_TYPE_CD='SB';
 IF P_CURR_BAL_AMT <V_MIN_AMT OR P_CURR_BAL_AMT IS NULL THEN
    RAISE EXCE4  ;
 END IF;
 V_COUNT:=COUNT_BANK_SB_ACCOUNT;
 IF V_COUNT=0 THEN
    V_ACCOUNT_NO:=1000012001;
 ELSE
    SELECT MAX(ACCOUNT_NO)+1 INTO V_ACCOUNT_NO FROM BANK_SB_ACCOUNT;
 END IF;
  
INSERT INTO BANK_SB_ACCOUNT 
VALUES (V_ACCOUNT_NO,P_PRIMARY_CUST_ID,P_SECONDARY_CUST_ID,
P_CURR_BAL_AMT,INITCAP(P_ACC_STATUS),P_START_DATE,P_END_DATE);

SELECT COUNT(*) INTO V_COUNT FROM BANK_TRANSACTION;
IF V_COUNT=0 THEN
 INSERT INTO BANK_TRANSACTION VALUES (100001201,'CR',SYSDATE,V_ACCOUNT_NO,'OPENING NEW ACCOUNT',P_CURR_BAL_AMT);
ELSE
 SELECT MAX(TRANS_NO)+1 INTO V_COUNT FROM BANK_TRANSACTION ;
 INSERT INTO BANK_TRANSACTION VALUES (V_COUNT,'CR',SYSDATE,V_ACCOUNT_NO,'OPENING NEW ACCOUNT',P_CURR_BAL_AMT);
END IF;
EXCEPTION
  WHEN EXCE1 THEN
  RAISE_APPLICATION_ERROR(-20030,'The primary customer id is incorrect');
  WHEN EXCE2 THEN
  RAISE_APPLICATION_ERROR(-20031,'The secondary customer id is incorrect');
  WHEN EXCE3 THEN
  RAISE_APPLICATION_ERROR(-20032,'The account status should be Active or Inactive');
  WHEN EXCE4 THEN
  RAISE_APPLICATION_ERROR(-20033,'The account balance has to be >= 1000 and cannot be null');
  WHEN OTHERS THEN
  NULL;
END ADD_SAVINGBANK_ACCOUNT;

---- PROCEDURE BODY FOR DEPOSIT IN SAVINGS ACCOUNT 
----------------------------------------------------------

PROCEDURE SAVINGBANK_DEPOSIT (P_TRANS_ACC_NO BANK_TRANSACTION.TRANS_ACC_NO%TYPE,
                         P_TRANS_DESC BANK_TRANSACTION.TRANS_DESC%TYPE,
                         P_TRANS_AMT BANK_TRANSACTION.TRANS_AMT%TYPE) IS
 V_COUNT NUMBER;
BEGIN
SELECT COUNT(*) INTO V_COUNT FROM BANK_TRANSACTION;
IF V_COUNT=0 THEN
 INSERT INTO BANK_TRANSACTION VALUES (100001201,'CR',SYSDATE,P_TRANS_ACC_NO,P_TRANS_DESC,P_TRANS_AMT);
ELSE
 SELECT MAX(TRANS_NO)+1 INTO V_COUNT FROM BANK_TRANSACTION ;
 INSERT INTO BANK_TRANSACTION VALUES (V_COUNT,'CR',SYSDATE,P_TRANS_ACC_NO,P_TRANS_DESC,P_TRANS_AMT);
 UPDATE BANK_SB_ACCOUNT SET CURR_BAL_AMT=CURR_BAL_AMT+P_TRANS_AMT WHERE ACCOUNT_NO=P_TRANS_ACC_NO;
END IF;
END SAVINGBANK_DEPOSIT;

-- PROCEDURE BODY FOR WITHDRAW IN SAVINGS ACCOUNT
-------------------------------------------------------------

PROCEDURE SAVINGBANK_WITHDRAW (P_TRANS_ACC_NO BANK_TRANSACTION.TRANS_ACC_NO%TYPE,
                          P_TRANS_DESC BANK_TRANSACTION.TRANS_DESC%TYPE,
                          P_TRANS_AMT BANK_TRANSACTION.TRANS_AMT%TYPE) IS
V_COUNT NUMBER;
V_CURR_BAL_AMT BANK_SB_ACCOUNT.CURR_BAL_AMT%TYPE;
BEGIN
SELECT CURR_BAL_AMT INTO V_CURR_BAL_AMT FROM BANK_SB_ACCOUNT WHERE ACCOUNT_NO=P_TRANS_ACC_NO;
IF V_CURR_BAL_AMT<=1000 THEN
RAISE EXCE1;
END IF;
SELECT COUNT(*) INTO V_COUNT FROM BANK_TRANSACTION;
IF V_COUNT=0 THEN
  INSERT INTO BANK_TRANSACTION VALUES (100001201,'DB',SYSDATE,P_TRANS_ACC_NO,P_TRANS_DESC,P_TRANS_AMT);
ELSE
 SELECT MAX(TRANS_NO)+1 INTO V_COUNT FROM BANK_TRANSACTION ;
 INSERT INTO BANK_TRANSACTION VALUES (V_COUNT,'DB',SYSDATE,P_TRANS_ACC_NO,P_TRANS_DESC,P_TRANS_AMT);
 UPDATE BANK_SB_ACCOUNT SET CURR_BAL_AMT=CURR_BAL_AMT-P_TRANS_AMT WHERE ACCOUNT_NO=P_TRANS_ACC_NO;
END IF;
EXCEPTION 
WHEN EXCE1 THEN
RAISE_APPLICATION_ERROR(-20034,'The account balance is not adequate to withdraw funds');
WHEN NO_DATA_FOUND THEN
RAISE_APPLICATION_ERROR(-20035,'The account number is invalid');
END  SAVINGBANK_WITHDRAW;                        
END CITI_BANK;